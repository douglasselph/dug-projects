[gd_scene load_steps=11 format=2]

[ext_resource path="res://tutorial/MeshInstance.gd" type="Script" id=1]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;

// Water #1:
render_mode specular_toon;

uniform sampler2D noise;
uniform sampler2D normalmap;
uniform float height_scale = 0.5;
// Water #2:
uniform float plane_mesh_size = 10.0;

varying vec2 tex_position;

// Waves:
float wave(vec2 position){
  position += texture(noise, position / plane_mesh_size).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

// Water:
float height(vec2 position, float time) {
	// vec2 offset = 0.01 * cos(position + time);
	// return texture(noise, position / plane_mesh_size).x; // Scaling factor is based on mesh size (this PlaneMesh is 10Ã—10).
	// Wave:
	// return wave(position * 0.4);
	
	float d = wave((position + time) * 0.4) * 0.3;
  	d += wave((position - time) * 0.3) * 0.3;
 	d += wave((position + time) * 0.5) * 0.2;
  	d += wave((position - time) * 0.6) * 0.2;
  	return d;
}

void vertex() {
	// Non-Water:
	// tex_position = VERTEX.xz / 2.0 + 0.5;
	// float height = texture(noise, tex_position).x;
	// VERTEX.y += height * height_scale;
	
	// Water:
	vec2 pos = VERTEX.xz;
	float k = height(pos, TIME);
	VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

void fragment() {
	// NORMALMAP = texture(normalmap, tex_position).xyz;
	// Water 2:
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	RIM = 0.2;
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	ALBEDO = vec3(0.1, 0.3, 0.5) + (0.1 * fresnel);
}


"

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=4]
noise = SubResource( 5 )

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=6]
as_normalmap = true
noise = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 3 )
shader_param/height_scale = 0.5
shader_param/plane_mesh_size = 10.0
shader_param/noise = SubResource( 4 )
shader_param/normalmap = SubResource( 6 )

[sub_resource type="PlaneMesh" id=1]
material = SubResource( 2 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="ProceduralSky" id=8]
sky_curve = 0.103383
sun_color = Color( 0.67451, 0.921569, 0.933333, 1 )

[sub_resource type="Environment" id=9]
background_mode = 2
background_sky = SubResource( 8 )

[node name="ShaderTutorial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
script = ExtResource( 1 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, -0.707107, 0.707107, 0, -0.707107, -0.707107, 0, -5, 0 )
visible = false
light_color = Color( 0.921569, 0.921569, 0.890196, 1 )
light_energy = 2.174
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 9 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.2, 0.5, 0 )
light_color = Color( 0.890196, 0.968627, 0.964706, 1 )
light_energy = 0.7
light_specular = 0.578
shadow_enabled = true
shadow_reverse_cull_face = true
omni_range = 43.785
omni_attenuation = 0.517633
